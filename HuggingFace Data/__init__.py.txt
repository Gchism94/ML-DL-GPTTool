# Copyright 2020 The HuggingFace Team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# When adding a new object to this init, remember to add it twice: once inside the `_import_structure` dictionary and
# once inside the `if TYPE_CHECKING` branch. The `TYPE_CHECKING` should have import statements as usual, but they are
# only there for type checking. The `_import_structure` is a dictionary submodule to list of object names, and is used
# to defer the actual importing for when the objects are requested. This way `import transformers` provides the names
# in the namespace without actually importing anything (and especially none of the backends).
# Check the dependencies satisfy the minimal versions required.
# pylint: disable=invalid-name
# Base objects, independent of any specific backend
# Losses
# Models
# sentencepiece-backed objects
# tokenizers-backed objects
# Fast tokenizers structure
# Tensorflow-text-specific objects
# keras-nlp-specific objects
# Vision-specific objects
# PyTorch-backed objects
# PyTorch domain libraries integration
# PyTorch models structure
# TensorFlow-backed objects
# TensorFlow models structure
# FLAX-backed objects
# Flax models structure
# Direct imports for type-checking
# Configuration
# Agents
# Data
# Feature Extractor
# Generation
# Integrations
# Model Cards
# TF 2.0 <=> PyTorch conversion utilities
# Pipelines
# Tokenization
# Trainer
# Files and general utilities
# bitsandbytes config
# Fast tokenizers imports
# Modeling
# Benchmarks
# PyTorch model imports
# Optimization
# Trainer
# TensorFlow
# Import the same objects as dummies to get them in the namespace.
# They will raise an import error if the user tries to instantiate / use them.
# Benchmarks
# TensorFlow model imports
# Optimization
# Import the same objects as dummies to get them in the namespace.
# They will raise an import error if the user tries to instantiate / use them.
# Flax model imports