
    Decorator marking a test as a test that control interactions between PyTorch and TensorFlow.

    PT+TF tests are skipped by default and we can run only them by setting RUN_PT_TF_CROSS_TESTS environment variable
    to a truthy value and selecting the is_pt_tf_cross_test pytest mark.

    

    Decorator marking a test as a test that control interactions between PyTorch and Flax

    PT+FLAX tests are skipped by default and we can run only them by setting RUN_PT_FLAX_CROSS_TESTS environment
    variable to a truthy value and selecting the is_pt_flax_cross_test pytest mark.

    

    Decorator marking a test as a staging test.

    Those tests will run using the staging environment of huggingface.co instead of the real model hub.
    

    Decorator marking a test as a pipeline test. If RUN_PIPELINE_TESTS is set to a falsy value, those tests will be
    skipped.
    

    Decorator marking a test as an agent test. If RUN_TOOL_TESTS is set to a falsy value, those tests will be skipped.
    

    Decorator marking a test as slow.

    Slow tests are skipped by default. Set the RUN_SLOW environment variable to a truthy value to run them.

    

    Decorator marking a test as too slow.

    Slow tests are skipped while they're in the process of being fixed. No test should stay tagged as "tooslow" as
    these will not be tested by the CI.

    

    Class decorator to apply @skip_if_not_implemented to all test methods.
    

    Decorator marking a test for a custom tokenizer.

    Custom tokenizers require additional dependencies, and are skipped by default. Set the RUN_CUSTOM_TOKENIZERS
    environment variable to a truthy value to run them.
    

    Decorator marking a test that requires BeautifulSoup4. These tests are skipped when BeautifulSoup4 isn't installed.
    

    Decorator marking a test that requires GaLore. These tests are skipped when GaLore isn't installed.
    https://github.com/jiaweizzhao/GaLore
    

    Decorator marking a test that requires LOMO. These tests are skipped when LOMO-optim isn't installed.
    https://github.com/OpenLMLab/LOMO
    

    Decorator marking a test that requires GrokAdamW. These tests are skipped when GrokAdamW isn't installed.
    

    Decorator marking a test that requires schedulefree. These tests are skipped when schedulefree isn't installed.
    https://github.com/facebookresearch/schedule_free
    

    Decorator marking a test that requires OpenCV.

    These tests are skipped when OpenCV isn't installed.

    

    Decorator marking a test that requires Levenshtein.

    These tests are skipped when Levenshtein isn't installed.

    

    Decorator marking a test that requires NLTK.

    These tests are skipped when NLTK isn't installed.

    

    Decorator marking a test that requires accelerate. These tests are skipped when accelerate isn't installed.
    

    Decorator marking a test that requires ggguf. These tests are skipped when gguf isn't installed.
    

    Decorator marking a test that requires fsdp. These tests are skipped when fsdp isn't installed.
    

    Decorator marking a test that requires g2p_en. These tests are skipped when SentencePiece isn't installed.
    

    Decorator marking a test that requires safetensors. These tests are skipped when safetensors isn't installed.
    

    Decorator marking a test that requires rjieba. These tests are skipped when rjieba isn't installed.
    

    Decorator marking a test that requires jieba. These tests are skipped when jieba isn't installed.
    

    Decorator marking a test that requires jinja. These tests are skipped when jinja isn't installed.
    

    Decorator marking a test that requires Timm.

    These tests are skipped when Timm isn't installed.

    

    Decorator marking a test that requires NATTEN.

    These tests are skipped when NATTEN isn't installed.

    

    Decorator marking a test that requires PyTorch.

    These tests are skipped when PyTorch isn't installed.

    

    Decorator marking a test that requires Flash Attention.

    These tests are skipped when Flash Attention isn't installed.

    

    Decorator marking a test that requires PyTorch's SDPA.

    These tests are skipped when requirements are not met (torch version).
    

    A decorator that loads the HF token for tests that require to load gated models.
    

    Decorator marking a test that requires PEFT.

    These tests are skipped when PEFT isn't installed.

    

    Decorator marking a test that requires Torchvision.

    These tests are skipped when Torchvision isn't installed.

    

    Decorator marking a test that requires PyTorch or TensorFlow.

    These tests are skipped when neither PyTorch not TensorFlow is installed.

    

    Decorator marking a test that requires Intel Extension for PyTorch.

    These tests are skipped when Intel Extension for PyTorch isn't installed or it does not match current PyTorch
    version.

    

    Decorator marking a test that requires TensorFlow probability.

    These tests are skipped when TensorFlow probability isn't installed.

    

    Decorator marking a test that requires torchaudio. These tests are skipped when torchaudio isn't installed.
    

    Decorator marking a test that requires TensorFlow. These tests are skipped when TensorFlow isn't installed.
    

    Decorator marking a test that requires JAX & Flax. These tests are skipped when one / both are not installed
    

    Decorator marking a test that requires SentencePiece. These tests are skipped when SentencePiece isn't installed.
    

    Decorator marking a test that requires Sacremoses. These tests are skipped when Sacremoses isn't installed.
    

    Decorator marking a test that requires SentencePiece. These tests are skipped when SentencePiece isn't installed.
    

    Decorator marking a test that requires Scipy. These tests are skipped when SentencePiece isn't installed.
    

    Decorator marking a test that requires ðŸ¤— Tokenizers. These tests are skipped when ðŸ¤— Tokenizers isn't installed.
    

    Decorator marking a test that requires tensorflow_text. These tests are skipped when tensroflow_text isn't
    installed.
    

    Decorator marking a test that requires keras_nlp. These tests are skipped when keras_nlp isn't installed.
    

    Decorator marking a test that requires pandas. These tests are skipped when pandas isn't installed.
    

    Decorator marking a test that requires PyTesseract. These tests are skipped when PyTesseract isn't installed.
    

    Decorator marking a test that requires PyTorch Quantization Toolkit. These tests are skipped when PyTorch
    Quantization Toolkit isn't installed.
    

    Decorator marking a test that requires the vision dependencies. These tests are skipped when torchaudio isn't
    installed.
    

    Decorator marking a test that requires ftfy. These tests are skipped when ftfy isn't installed.
    

    Decorator marking a test that requires SpaCy. These tests are skipped when SpaCy isn't installed.
    

    Decorator marking a test that requires a multi-GPU setup (in PyTorch). These tests are skipped on a machine without
    multiple GPUs.

    To run *only* the multi_gpu tests, assuming all test names contain multi_gpu: $ pytest -sv ./tests -k "multi_gpu"
    

    Decorator marking a test that requires a multi-accelerator (in PyTorch). These tests are skipped on a machine
    without multiple accelerators. To run *only* the multi_accelerator tests, assuming all test names contain
    multi_accelerator: $ pytest -sv ./tests -k "multi_accelerator"
    

    Decorator marking a test that requires 0 or 1 GPU setup (in PyTorch).
    

    Decorator marking a test that requires 0 or 1 accelerator setup (in PyTorch).
    

    Decorator marking a test that requires 0 or 1 or 2 GPU setup (in PyTorch).
    

    Decorator marking a test that requires 0 or 1 or 2 accelerator setup (in PyTorch).
    

    Decorator marking a test that requires TorchXLA (in PyTorch).
    

    Decorator marking a test that requires NeuronCore (in PyTorch).
    

    Decorator marking a test that requires NPU (in PyTorch).
    

    Decorator marking a test that requires a multi-NPU setup (in PyTorch). These tests are skipped on a machine without
    multiple NPUs.

    To run *only* the multi_npu tests, assuming all test names contain multi_npu: $ pytest -sv ./tests -k "multi_npu"
    

    Decorator marking a test that requires XPU (in PyTorch).

    These tests are skipped when XPU backend is not available. XPU backend might be available either via stock
    PyTorch (>=2.4) or via Intel Extension for PyTorch. In the latter case, if IPEX is installed, its version
    must match match current PyTorch version.
    

    Decorator marking a test that should be skipped for XPU.
    

    Decorator marking a test that requires a multi-XPU setup (in PyTorch). These tests are skipped on a machine without
    multiple XPUs.

    To run *only* the multi_xpu tests, assuming all test names contain multi_xpu: $ pytest -sv ./tests -k "multi_xpu"
    
Decorator marking a test that requires TorchDynamo
Decorator marking a test that requires torchao
Decorator marking a test that requires Torch-TensorRT FX
Decorator marking a test that requires CUDA and PyTorch.

    Decorator marking a test that requires a GPU if bitsandbytes multi-backend feature is not enabled.
    
Decorator marking a test that requires an accessible accelerator and PyTorch.
Decorator marking a test that requires a device that supports fp16
Decorator marking a test that requires supports for fp8
Decorator marking a test that requires a device that supports bf16
Decorator marking a test that requires torch>=1.10, using Ampere GPU or newer arch with cuda>=11.0
Decorator marking a test that requires torch>=1.10, using CPU.
Decorator marking a test that requires Ampere or a newer GPU arch, cuda>=11 and torch>=1.7.
Decorator marking a test that requires detectron2.
Decorator marking a test that requires faiss.

    Decorator marking a test that requires optuna.

    These tests are skipped when optuna isn't installed.

    

    Decorator marking a test that requires Ray/tune.

    These tests are skipped when Ray/tune isn't installed.

    

    Decorator marking a test that requires SigOpt.

    These tests are skipped when SigOpt isn't installed.

    

    Decorator marking a test that requires wandb.

    These tests are skipped when wandb isn't installed.

    

    Decorator marking a test requires clearml.

    These tests are skipped when clearml isn't installed.

    

    Decorator marking a test that requires soundfile

    These tests are skipped when soundfile isn't installed.

    

    Decorator marking a test that requires deepspeed
    

    Decorator marking a test that requires apex
    

    Decorator marking a test that requires aqlm
    

    Decorator marking a test that requires eetq
    

    Decorator marking a test that requires av
    

    Decorator marking a test that requires the bitsandbytes library. Will be skipped when the library or its hard dependency torch is not installed.
    

    Decorator for optimum dependency
    

    Decorator for `tensorboard` dependency
    

    Decorator for auto_gptq dependency
    

    Decorator for auto_awq dependency
    

    Decorator for quanto dependency
    

    Decorator for compressed_tensors dependency
    

    Decorator for fbgemm_gpu dependency
    

    Decorator marking a test that requires phonemizer
    

    Decorator marking a test that requires pyctcdecode
    

    Decorator marking a test that requires librosa
    

    Decorator marking a test that requires liger_kernel
    

    Decorator marking a test that requires essentia
    

    Decorator marking a test that requires pretty_midi
    

    Decorator marking a test that requires `/usr/bin/time`
    

    Decorator marking a test that requires sudachi
    

    Decorator marking a test that requires sudachi_projection
    

    Decorator marking a test that requires jumanpp
    

    Decorator marking a test that requires jumanpp
    

    Decorator marking a test that requires TikToken. These tests are skipped when TikToken isn't installed.
    

    Return the number of available gpus (regardless of whether torch, tf or jax is used)
    

    Args:
        append_path: optional path to append to the tests dir path

    Return:
        The full path to the `tests` dir, so that the tests can be invoked from anywhere. Optionally `append_path` is
        joined after the `tests` dir the former is provided.

    

    Context manager to capture:

        - stdout: replay it, clean it up and make it available via `obj.out`
        - stderr: replay it and make it available via `obj.err`

    Args:
        out (`bool`, *optional*, defaults to `True`): Whether to capture stdout or not.
        err (`bool`, *optional*, defaults to `True`): Whether to capture stderr or not.
        replay (`bool`, *optional*, defaults to `True`): Whether to replay or not.
            By default each captured stream gets replayed back on context's exit, so that one can see what the test was
            doing. If this is a not wanted behavior and the captured data shouldn't be replayed, pass `replay=False` to
            disable this feature.

    Examples:

    ```python
    # to capture stdout only with auto-replay
    with CaptureStdout() as cs:
        print("Secret message")
    assert "message" in cs.out

    # to capture stderr only with auto-replay
    import sys

    with CaptureStderr() as cs:
        print("Warning: ", file=sys.stderr)
    assert "Warning" in cs.err

    # to capture both streams with auto-replay
    with CaptureStd() as cs:
        print("Secret message")
        print("Warning: ", file=sys.stderr)
    assert "message" in cs.out
    assert "Warning" in cs.err

    # to capture just one of the streams, and not the other, with auto-replay
    with CaptureStd(err=False) as cs:
        print("Secret message")
    assert "message" in cs.out
    # but best use the stream-specific subclasses

    # to capture without auto-replay
    with CaptureStd(replay=False) as cs:
        print("Secret message")
    assert "message" in cs.out
    ```
Same as CaptureStd but captures only stdout
Same as CaptureStd but captures only stderr

    Context manager to capture `logging` streams

    Args:
        logger: 'logging` logger object

    Returns:
        The captured output is available via `self.out`

    Example:

    ```python
    >>> from transformers import logging
    >>> from transformers.testing_utils import CaptureLogger

    >>> msg = "Testing 1, 2, 3"
    >>> logging.set_verbosity_info()
    >>> logger = logging.get_logger("transformers.models.bart.tokenization_bart")
    >>> with CaptureLogger(logger) as cl:
    ...     logger.info(msg)
    >>> assert cl.out, msg + "\n"
    ```
    

    This is a context manager to temporarily change transformers modules logging level to the desired value and have it
    restored to the original setting at the end of the scope.

    Example:

    ```python
    with LoggingLevel(logging.INFO):
        AutoModel.from_pretrained("openai-community/gpt2")  # calls logger.info() several times
    ```
    

    Temporary add given path to `sys.path`.

    Usage :

    ```python
    with ExtendSysPath("/path/to/dir"):
        mymodule = importlib.import_module("mymodule")
    ```
    

    This class extends *unittest.TestCase* with additional features.

    Feature 1: A set of fully resolved important file and dir path accessors.

    In tests often we need to know where things are relative to the current test file, and it's not trivial since the
    test could be invoked from more than one directory or could reside in sub-directories with different depths. This
    class solves this problem by sorting out all the basic paths and provides easy accessors to them:

    - `pathlib` objects (all fully resolved):

       - `test_file_path` - the current test file path (=`__file__`)
       - `test_file_dir` - the directory containing the current test file
       - `tests_dir` - the directory of the `tests` test suite
       - `examples_dir` - the directory of the `examples` test suite
       - `repo_root_dir` - the directory of the repository
       - `src_dir` - the directory of `src` (i.e. where the `transformers` sub-dir resides)

    - stringified paths---same as above but these return paths as strings, rather than `pathlib` objects:

       - `test_file_path_str`
       - `test_file_dir_str`
       - `tests_dir_str`
       - `examples_dir_str`
       - `repo_root_dir_str`
       - `src_dir_str`

    Feature 2: Flexible auto-removable temporary dirs which are guaranteed to get removed at the end of test.

    1. Create a unique temporary dir:

    ```python
    def test_whatever(self):
        tmp_dir = self.get_auto_remove_tmp_dir()
    ```

    `tmp_dir` will contain the path to the created temporary dir. It will be automatically removed at the end of the
    test.


    2. Create a temporary dir of my choice, ensure it's empty before the test starts and don't
    empty it after the test.

    ```python
    def test_whatever(self):
        tmp_dir = self.get_auto_remove_tmp_dir("./xxx")
    ```

    This is useful for debug when you want to monitor a specific directory and want to make sure the previous tests
    didn't leave any data in there.

    3. You can override the first two options by directly overriding the `before` and `after` args, leading to the
        following behavior:

    `before=True`: the temporary dir will always be cleared at the beginning of the test.

    `before=False`: if the temporary dir already existed, any existing files will remain there.

    `after=True`: the temporary dir will always be deleted at the end of the test.

    `after=False`: the temporary dir will always be left intact at the end of the test.

    Note 1: In order to run the equivalent of `rm -r` safely, only subdirs of the project repository checkout are
    allowed if an explicit `tmp_dir` is used, so that by mistake no `/tmp` or similar important part of the filesystem
    will get nuked. i.e. please always pass paths that start with `./`

    Note 2: Each test can register multiple temporary dirs and they all will get auto-removed, unless requested
    otherwise.

    Feature 3: Get a copy of the `os.environ` object that sets up `PYTHONPATH` specific to the current test suite. This
    is useful for invoking external programs from the test suite - e.g. distributed training.


    ```python
    def test_whatever(self):
        env = self.get_env()
    ```

        Return a copy of the `os.environ` object that sets up `PYTHONPATH` correctly, depending on the test suite it's
        invoked from. This is useful for invoking external programs from the test suite - e.g. distributed training.

        It always inserts `./src` first, then `./tests` or `./examples` depending on the test suite type and finally
        the preset `PYTHONPATH` if any (all full resolved paths).

        

        Args:
            tmp_dir (`string`, *optional*):
                if `None`:

                   - a unique temporary path will be created
                   - sets `before=True` if `before` is `None`
                   - sets `after=True` if `after` is `None`
                else:

                   - `tmp_dir` will be created
                   - sets `before=True` if `before` is `None`
                   - sets `after=False` if `after` is `None`
            before (`bool`, *optional*):
                If `True` and the `tmp_dir` already exists, make sure to empty it right away if `False` and the
                `tmp_dir` already exists, any existing files will remain there.
            after (`bool`, *optional*):
                If `True`, delete the `tmp_dir` at the end of the test if `False`, leave the `tmp_dir` and its contents
                intact at the end of the test.

        Returns:
            tmp_dir(`string`): either the same value as passed via *tmp_dir* or the path to the auto-selected tmp dir
        

        Runs the passed python one liner (just the code) and returns how much max cpu memory was used to run the
        program.

        Args:
            one_liner_str (`string`):
                a python one liner code that gets passed to `python -c`

        Returns:
            max cpu memory bytes used to run the program. This value is likely to vary slightly from run to run.

        Requirements:
            this helper needs `/usr/bin/time` to be installed (`apt install time`)

        Example:

        ```
        one_liner_str = 'from transformers import AutoModel; AutoModel.from_pretrained("google-t5/t5-large")'
        max_rss = self.python_one_liner_max_rss(one_liner_str)
        ```
        

    this is a convenience wrapper, that allows this ::

    @mockenv(RUN_SLOW=True, USE_TF=False) def test_something():
        run_slow = os.getenv("RUN_SLOW", False) use_tf = os.getenv("USE_TF", False)

    

    Temporarily updates the `os.environ` dictionary in-place. Similar to mockenv

    The `os.environ` dictionary is updated in-place so that the modification is sure to work in all situations.

    Args:
      remove: Environment variables to remove.
      update: Dictionary of environment variables and values to add/update.
    

    This function is to be called from `conftest.py` via `pytest_addoption` wrapper that has to be defined there.

    It allows loading both `conftest.py` files at once without causing a failure due to adding the same `pytest`
    option.

    

    Generate multiple reports at the end of test suite run - each report goes into a dedicated file in the current
    directory. The report files are prefixed with the test suite name.

    This function emulates --duration and -rA pytest arguments.

    This function is to be called from `conftest.py` via `pytest_terminal_summary` wrapper that has to be defined
    there.

    Args:
    - tr: `terminalreporter` passed from `conftest.py`
    - id: unique id like `tests` or `examples` that will be incorporated into the final reports filenames - this is
      needed as some jobs have multiple runs of pytest, so we can't have them overwrite each other.

    NB: this functions taps into a private _pytest API and while unlikely, it could break should pytest do internal
    changes - also it calls default internal methods of terminalreporter which can be hijacked by various `pytest-`
    plugins and interfere.

    

    Returns an int value of worker's numerical id under `pytest-xdist`'s concurrent workers `pytest -n N` regime, or 0
    if `-n 1` or `pytest-xdist` isn't being used.
    

    Returns a port number that can be fed to `torch.distributed.launch`'s `--master_port` argument.

    Under `pytest-xdist` it adds a delta number based on a worker id so that concurrent tests don't try to use the same
    port at once.
    

    Simplifies an object by rounding float numbers, and downcasting tensors/numpy arrays to get simple equality test
    within tests.
    

    Runs `command` with `subprocess.check_output` and will potentially return the `stdout`. Will also properly capture
    if an error occured while running `command`
    

    Helper class that will count all requests made online.

    Might not be robust if urllib3 changes its logging format but should be good enough for us.

    Usage:
    ```py
    with RequestCounter() as counter:
        _ = AutoTokenizer.from_pretrained("hf-internal-testing/tiny-random-bert")
    assert counter["GET"] == 0
    assert counter["HEAD"] == 1
    assert counter.total_calls == 1
    ```
    

    To decorate flaky tests. They will be retried on failures.

    Args:
        max_attempts (`int`, *optional*, defaults to 5):
            The maximum number of attempts to retry the flaky test.
        wait_before_retry (`float`, *optional*):
            If provided, will wait that number of seconds before retrying the test.
        description (`str`, *optional*):
            A string to describe the situation (what / where / why is flaky, link to GH issue/PR comments, errors,
            etc.)
    

    To run a test in a subprocess. In particular, this can avoid (GPU) memory issue.

    Args:
        test_case (`unittest.TestCase`):
            The test that will run `target_func`.
        target_func (`Callable`):
            The function implementing the actual testing logic.
        inputs (`dict`, *optional*, defaults to `None`):
            The inputs that will be passed to `target_func` through an (input) queue.
        timeout (`int`, *optional*, defaults to `None`):
            The timeout (in seconds) that will be passed to the input and output queues. If not specified, the env.
            variable `PYTEST_TIMEOUT` will be checked. If still `None`, its value will be set to `600`.
    

    To decorate a test to run in a subprocess using the `subprocess` module. This could avoid potential GPU memory
    issues (GPU OOM or a test that causes many subsequential failing with `CUDA error: device-side assert triggered`).
    

The following contains utils to run the documentation tests without having to overwrite any files.

The `preprocess_string` function adds `# doctest: +IGNORE_RESULT` markers on the fly anywhere a `load_dataset` call is
made as a print would otherwise fail the corresonding line.

To skip cuda tests, make sure to call `SKIP_CUDA_DOCTEST=1 pytest --doctest-modules <path_to_files_to_test>

Prepare a docstring or a `.md` file to be run by doctest.

    The argument `string` would be the whole file content if it is a `.md` file. For a python file, it would be one of
    its docstring. In each case, it may contain multiple python code examples. If `skip_cuda_tests` is `True` and a
    cuda stuff is detective (with a heuristic), this method will return an empty string so no doctest will be run for
    `string`.
    

    Overwrites the DocTestParser from doctest to properly parse the codeblocks that are formatted with black. This
    means that there are no extra lines at the end of our snippets. The `# doctest: +IGNORE_RESULT` marker is also
    added anywhere a `load_dataset` call is made as a print would otherwise fail the corresponding line.

    Tests involving cuda are skipped base on a naive pattern that should be updated if it is not enough.
    

        Overwrites the `parse` method to incorporate a skip for CUDA tests, and remove logs and dataset prints before
        calling `super().parse`
        

    Overwrites the `DoctestModule` of the pytest package to make sure the HFDocTestParser is used when discovering
    tests.
    
A hackish doctest finder that overrides stdlib internals to fix a stdlib bug.

            https://github.com/pytest-dev/pytest/issues/3456 https://bugs.python.org/issue25532
            
Doctest code does not take into account `@property`, this
                is a hackish way to fix it. https://bugs.python.org/issue17446

                Wrapped Doctests will need to be unwrapped so the correct line number is returned. This will be
                reported upstream. #8796
                
# Copyright 2020 The HuggingFace Team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Used to test Auto{Config, Model, Tokenizer} model_type detection.
# Used to test the hub
# Not critical, only usable on the sandboxed CI instance.
# KEY isn't set, default to `default`.
# KEY is set, convert it to True or False.
# More values are supported, but let's keep the message simple.
# We don't need a hard dependency on pytest in the main library
# We don't need a hard dependency on pytest in the main library
# We don't need a hard dependency on pytest in the main library
# We don't need a hard dependency on pytest in the main library
# We don't need a hard dependency on pytest in the main library
# Allow running locally with the default token env variable
# Set env var CUDA_VISIBLE_DEVICES="" to force cpu-mode
# try creating device to see if provided device is valid
# this function caller's __file__
#
# Helper functions for dealing with testing text outputs
# The original code came from:
# https://github.com/fastai/fastai/blob/master/tests/utils/text.py
# When any function contains print() calls that get overwritten, like progress bars,
# a special care needs to be applied, since under pytest -s captured output (capsys
# or contextlib.redirect_stdout) contains any temporary printed strings, followed by
# \r's. This helper function ensures that the buffer will contain the same output
# with and without -s in pytest, by turning:
# foo bar\r tar mar\r final message
# into:
# final message
# it can handle a single string or a multiline buffer
# to capture stdout only with auto-replay
# to capture stderr only with auto-replay
# to capture both streams with auto-replay
# to capture just one of the streams, and not the other, with auto-replay
# but best use the stream-specific subclasses
# to capture without auto-replay
# in tests it's the best to capture only the stream that's wanted, otherwise
# it's easy to miss things, so unless you need to capture both streams, use the
# subclasses below (less typing). Or alternatively, configure `CaptureStd` to
# disable the stream you don't need to test.
# calls logger.info() several times
# adapted from https://stackoverflow.com/a/64789046/9201239
# get_auto_remove_tmp_dir feature:
# figure out the resolved paths for repo_root, tests, examples, etc.
# defining the most likely desired behavior for when a custom path is provided.
# this most likely indicates the debug mode where we want an easily locatable dir that:
# 1. gets cleared out before the test (if it already exists)
# 2. is left intact after the test
# using provided path
# to avoid nuking parts of the filesystem, only relative paths are allowed
# ensure the dir is empty to start with
# defining the most likely desired behavior for when a unique tmp path is auto generated
# (not a debug mode), here we require a unique tmp dir that:
# 1. is empty before the test (it will be empty in this situation anyway)
# 2. gets fully removed after the test
# using unique tmp dir (always empty, regardless of `before`)
# register for deletion
# returned data is in KB so convert to bytes
# get_auto_remove_tmp_dir feature: remove registered temp dirs
# delete all the env variables having `ACCELERATE` in them
# from https://stackoverflow.com/a/34333710/9201239
# List of environment variables being updated or removed.
# Environment variables and values to restore on exit.
# Environment variables and values to remove on exit.
# --- pytest conf functions --- #
# to avoid multiple invocation from tests/conftest.py and examples/conftest.py - make sure it's called only once
# custom durations report
# note: there is no need to call pytest --durations=XX to get this separate report
# adapted from https://github.com/pytest-dev/pytest/blob/897f151e/src/_pytest/runner.py#L66
# sec
# expecting that the reports were --tb=long (default) so we chop them off here to the last frame
# chop off the optional leading extra frames, leaving only the last one
# note: not printing out any rep.sections to keep the report short
# use ready-made report funcs, we are just hijacking the filehandle to log to a dedicated file each
# adapted from https://github.com/pytest-dev/pytest/blob/897f151e/src/_pytest/terminal.py#L814
# note: some pytest plugins may interfere by hijacking the default `terminalreporter` (e.g.
# pytest-instafail does that)
# report failures with line/short/long styles
# full tb
# config.option.tbstyle = "short" # short tb
# one line per error
# normal warnings
# final warnings
# emulate -rA (used in summary_passes() and short_test_summary())
# Skip the `passes` report, as it starts to take more than 5 minutes, and sometimes it timeouts on CircleCI if it
# takes > 10 minutes (as this part doesn't generate any output on the terminal).
# (also, it seems there is no useful information in this report, and we rarely need to read it)
# with open(report_files["passes"], "w") as f:
#     tr._tw = create_terminal_writer(config, f)
#     tr.summary_passes()
# restore:
# --- distributed testing functions --- #
# adapted from https://stackoverflow.com/a/59041913/9201239
# noqa
# note: there is a warning for a possible deadlock when using `wait` with huge amounts of data in the pipe
# https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process.wait
#
# If it starts hanging, will need to switch to the following code. The problem is that no data
# will be seen until it's done and if it hangs for example there will be no debug info.
# out, err = await p.communicate()
# return _RunOutput(p.returncode, out, err)
# XXX: the timeout doesn't seem to make any difference here
# check that the subprocess actually did run and produced some output, should the test rely on
# the remote side to do the testing
# length can only be 1 if dict is empty
# otherwise make sure json has correct format (at least 3 lines)
# each key one line, ident should be 2, min length is 3
# These utils relate to ensuring the right error message is received when running scripts
# We can't send `unittest.TestCase` to the child, otherwise we get issues regarding pickle.
# Kill the child process if we can't get outputs from it in time: otherwise, the hanging subprocess prevents
# the test to exit properly.
# If not subclass of `unitTest.TestCase` and `pytestconfig` is used: try to grab and use the arguments
# Otherwise, simply run the test with no option at all
# doctest: +IGNORE_RESULT` markers on the fly anywhere a `load_dataset` call is
# doctest: +IGNORE_RESULT" not in codeblock:
# doctest: +IGNORE_RESULT", codeblock)
# doctest: +IGNORE_RESULT` marker is also
# This regular expression is used to find doctest examples in a
# string.  It defines three groups: `source` is the source code
# (including leading indentation and prompts); `indent` is the
# indentation of the first (PS1) line of the source code; and
# `want` is the expected output (including leading indentation).
# fmt: off
# Source consists of a PS1 line followed by zero or more PS2 lines.
# PS1 line
# PS2 lines
# Want consists of any non-blank lines that do not start with PS1.
# Not a blank line
# Not a line starting with PS1
# !!!!!!!!!!! HF Specific !!!!!!!!!!!
# Match any character except '`' until a '```' is found (this is specific to HF because black removes the last line)
# !!!!!!!!!!! HF Specific !!!!!!!!!!!
# Match a new line or end of string
# fmt: on
# !!!!!!!!!!! HF Specific !!!!!!!!!!!
# !!!!!!!!!!! HF Specific !!!!!!!!!!!
#8796
# Get the main obj in case of it being wrapped
# Type ignored because this is a private function.
# type:ignore[misc]
# Type ignored because this is a private function.
# type:ignore[misc]
# !!!!!!!!!!! HF Specific !!!!!!!!!!!
# !!!!!!!!!!! HF Specific !!!!!!!!!!!
# skip empty doctests and cuda
# Some device agnostic functions return values. Need to guard against `None`
# instead at user level.
# Mappings from device names to callable functions to support device agnostic
# testing.
# If `TRANSFORMERS_TEST_DEVICE_SPEC` is enabled we need to import extra entries
# into device to function mappings.
# Try to strip extension for later import â€“ also verifies we are importing a
# python file.
# Imported file must contain `DEVICE_NAME`. If it doesn't, terminate early.
# Try to import the function directly
# If the function doesn't exist, and there is no default, throw an error
# Add one entry here for each `BACKEND_*` dictionary.
# Fields with a MISSING default are required and must be in the output
# All output keys must match either a required or optional field in the Hub spec